# 应用服务 WEB 访问端口
server.port=8060
# 应用名称
spring.application.name=test-monitor-conf-port

# Actuator Web 访问端口
management.server.port=9041
# 选择打开所有的监控点
#management.endpoints.jmx.exposure.include=*
# 开启Actuator服务，Springboot Actuator 会自动配置一个URL为/actuator/Prometheus的HTTP服务来供Prometheus抓取数据，不过默认该服务是关闭的，该配置将打开所有的Actuator服务。
management.endpoints.web.exposure.include=*
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
# 端点公开的应用健康信息等级：never/when-authorized/always
# never	不展示详细信息，up 或者 down 的状态，默认配置
# when-authorized	详细信息将会展示给通过认证的用户。授权的角色可以通过management.endpoint.health.roles 配置
# always	对所有用户暴露详细信息
management.endpoint.health.show-details=always
## 会将该工程应用名称添加到计量器注册表的tag中去，方便后边Prometheus根据应用名称来区分不同的服务。
management.metrics.tags.application=${spring.application.name}
## shutdown端点：：这个端点属于操作控制类端点，可以优雅关闭 Spring Boot 应用。使用这个功能首先需要打开下面的配置
#management.endpoint.shutdown.enabled=true

## 我们也可以通过配置禁用某个组件的健康监测。例如下面的配置禁用了 mongodb 的组件健康监测。
#management.health.mongo.enabled=false
## 或者我们可以禁用所有自动配置的健康指示器
#management.health.defaults.enabled=false
## 除了使用自动引入的健康指示器之外，我们也可以自定义一个 Health Indicator，只需要实现 HealthIndicator 接口或者继承 AbstractHealthIndicator 类


# Redis Conf
# Redis 数据库索引（默认为 0）
spring.redis.database=0
spring.redis.host=81.70.53.12
spring.redis.port=6379
spring.redis.password=zhoukl

# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=0
spring.redis.timeout=1000